{# src\file_conversor\.web\templates\_base\_status_bar.jinja2 #}

<div x-data="{}" class="
    status-bar 
    is-fixed-bottom 
    is-flex is-justify-content-space-between is-align-items-center 
    is-size-6 p-1 pl-3 pr-3">
    <div class="status-bar-start is-flex is-align-items-center">
        <span class="has-text-weight-bold mr-2" :class="{
        'is-flex': (typeof $store.status_bar.message === 'string'), 
        'is-hidden': (typeof $store.status_bar.message !== 'string'),
        }">STATUS:</span>
        <span class="status-message" x-text="$store.status_bar.message"></span>
    </div>
    <div class="status-bar-center is-align-items-center is-flex-grow-1 mx-6 px-6" :class="{
        'is-flex': (typeof $store.status_bar.progress === 'number'), 
        'is-hidden': (typeof $store.status_bar.progress !== 'number'),
        }">
        <progress class="status-progress-bar progress is-small is-success my-0 mr-3"
            :value="(typeof $store.status_bar.progress === 'number' && $store.status_bar.progress >= 0) ? $store.status_bar.progress : null"
            max="100"></progress>
        <span class="status-progress-text" :class="{
        'is-hidden': (typeof $store.status_bar.progress !== 'number' || $store.status_bar.progress < 0),
        }" x-text="`${Math.round($store.status_bar.progress)}%`"></span>
    </div>
    <div class="status-bar-end is-align-items-center" :class="{
        'is-flex': (typeof $store.status_bar.time === 'number'),
        'is-hidden': (typeof $store.status_bar.time !== 'number'),
        }">
        <span class="status-time" x-text="
        new Date($store.status_bar.time * 1000)
            .toISOString()
            .substring(11, 19)
        "></span>
    </div>
</div>

<script>
    document.addEventListener('alpine:init', () => {
        if (Alpine.store('status_bar')) return;

        let modal = Alpine.store('modal');
        Alpine.store('status_bar', {
            message: null,
            progress: null,
            time: null,
            status_id: 0,

            async update() {
                try {
                    if (typeof this.progress !== 'number') {
                        this.progress = -1;
                    }
                    if (typeof this.time !== 'number') {
                        this.time = 0;
                    } else {
                        this.time++;
                    }

                    const response = await fetch(`{{ url_for('api_status') }}?status_id=${this.status_id}`, {
                        method: 'GET',
                    });

                    if (!response.ok) {
                        throw new Error(`${response.status} ${response.statusText}`);
                    }

                    const data = await response.json();
                    this.message = data.message;
                    this.progress = data.progress;

                    if (data.status === 'failed') {
                        throw new Error(data.exception || 'Unknown failure');
                    }

                    if (data.status !== 'completed') {
                        setTimeout(() => this.update(), 1000);
                    }

                } catch (err) {
                    console.error('Status update failed:', err);

                    if (err.message.includes('Failed to fetch')) {
                        this.message = '{{ _base_status_bar.lost_conn }}';
                        modal.title = '{{ _base_status_bar.modal.lost_conn.title }}';
                        modal.content_html = '{{ _base_status_bar.modal.lost_conn.msg }}';
                        modal.closeable = false;
                    } else {
                        this.message = '{{ _base_status_bar.failed }}';
                        modal.title = '{{ _base_status_bar.modal.title }}';
                        modal.content_html = `{{ _base_status_bar.modal.error }}: ${err.message}`;
                    }
                    modal.open = true;
                }
            },
        });

        Alpine.store('status_bar').update();
    });
</script>