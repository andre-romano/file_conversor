name: Release CLI

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:
    inputs:
      dry_run:
        description: "Run in dry mode?"
        required: false
        default: "true"

env:
  PROJECT_NAME: file_conversor # Update with your project name
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  changelog:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Necessário para o git-chglog ver todo o histórico

      - name: Install git-chglog
        run: |
          curl -sSL https://github.com/git-chglog/git-chglog/releases/download/v0.15.1/git-chglog_0.15.1_linux_amd64.tar.gz | tar xz
          chmod +rx git-chglog
          sudo mv git-chglog /usr/local/bin/

      - name: Generate CHANGELOG.md
        run: |
          git-chglog --config .chglog/config.yml --template .chglog/CHANGELOG.tpl.md -o CHANGELOG.md
          cat CHANGELOG.md

      - name: Upload changelog
        uses: actions/upload-artifact@v4
        with:
          name: changelog
          path: CHANGELOG.md

  build:
    needs: changelog
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - uses: actions/checkout@v4

      - name: Download CHANGELOG.md artifact
        uses: actions/download-artifact@v4
        with:
          name: changelog
          path: .

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip          
          pip install pdm
          pdm install

      - name: Get version from tag
        id: get-version
        run: |
          echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
          echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Build with PyInstaller
        run: |
          pdm run invoke build-binary
          cp CHANGELOG.md dist/${{ env.PROJECT_NAME }}/

      - name: Compress executable by OS
        run: |
          echo "Compressing binary for $RUNNER_OS"
          cd dist
          if [ "$RUNNER_OS" = "Windows" ]; then
            powershell -Command "Compress-Archive -Path ${{ env.PROJECT_NAME }} -DestinationPath ${{ env.PROJECT_NAME }}-windows-latest.zip"
          elif [ "$RUNNER_OS" = "macOS" ]; then
            zip -r "${{ env.PROJECT_NAME }}-macos-latest.zip" "${{ env.PROJECT_NAME }}"
          else
            zip -r "${{ env.PROJECT_NAME }}-ubuntu-latest.zip" "${{ env.PROJECT_NAME }}"
          fi
          pwd
          ls -l
        shell: bash

      - name: Upload zipped binary
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PROJECT_NAME }}-${{ matrix.os }}
          path: dist/${{ env.PROJECT_NAME }}-${{ matrix.os }}.zip

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download CHANGELOG.md artifact
        uses: actions/download-artifact@v4
        with:
          name: changelog
          path: .

      - name: Download dist/ artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Flatten artifacts
        run: |
          mkdir -p flat
          find dist -type f -name "*.zip" -exec mv {} flat/ \;
          mv flat dist
          ls -l dist

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip          
          pip install pdm
          pdm install

      - name: Get version from tag
        id: get-version
        run: |
          echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
          echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Read CHANGELOG.md into variable
        id: changelog
        run: |
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat CHANGELOG.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Generate checksums
        run: |
          pdm run invoke gen-checksum-file
          cat dist/checksums.sha256

      - name: Publish GitHub Release
        if: ${{ github.event_name != 'workflow_dispatch' || inputs.dry_run == 'false' }}
        uses: softprops/action-gh-release@v2
        with:
          name: v${{ env.VERSION }}
          tag_name: v${{ env.VERSION }}
          body: ${{ steps.changelog.outputs.changelog }}
          files: |
            dist/*.zip
            dist/checksums.sha256
          draft: false
          prerelease: ${{ contains(github.ref, '-') }} # ignore versions with v*.*.*-*

  deploy-chocolatey:
    needs: release
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Install Chocolatey
        run: |
          Set-ExecutionPolicy Bypass -Scope Process -Force
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
          iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
          choco --version

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pdm
          pdm install

      - name: Build Chocolatey package
        run: |
          pdm run invoke build-choco

      - name: Check if package was created
        run: |
          if (!(Test-Path "dist/${{ env.PROJECT_NAME }}*.nupkg")) {
            Write-Error "Package not found"
            exit 1
          }

      - name: Push to Chocolatey
        if: ${{ github.event_name != 'workflow_dispatch' || inputs.dry_run == 'false' }}
        env:
          CHOCO_API_KEY: ${{ secrets.CHOCO_API_KEY }}
        run: |
          choco apikey --key "${{ env.CHOCO_API_KEY }}" --source https://push.chocolatey.org/
          choco push "dist/${{ env.PROJECT_NAME }}*.nupkg" --source https://push.chocolatey.org/
        continue-on-error: false
